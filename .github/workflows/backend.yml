concurrency:
  cancel-in-progress: true
  group: backend-${{ github.event.pull_request.number || github.ref }}
jobs:
  build:
    if: ${{ (needs.paths-filter.outputs.not-ignore == 'true') || (github.event_name
      == 'push') }}
    name: Backend-Build
    needs: paths-filter
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v2
      with:
        submodules: true
    - continue-on-error: true
      name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      name: Sanity Check
      uses: ./.github/actions/sanity-check
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - continue-on-error: true
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}-backend
        path: ~/.m2/repository
        restore-keys: ${{ runner.os }}-maven-
    - continue-on-error: true
      name: Build and Package on ${{ matrix.java }}
      run: "./mvnw -B clean install \\\n       -Prelease \\\n       -Dmaven.test.skip=true\
        \ \\\n       -Dspotless.skip=true \\\n       -Dhttp.keepAlive=false \\\n \
        \      -Dmaven.wagon.http.pool=false \\\n       -Dmaven.wagon.httpconnectionManager.ttlSeconds=120\n"
    - continue-on-error: true
      name: Check dependency license
      run: tools/dependencies/check-LICENSE.sh
    - continue-on-error: true
      if: ${{ matrix.java == '8' }}
      name: Upload Binary Package
      uses: actions/upload-artifact@v2
      with:
        name: binary-package-${{ matrix.java }}
        path: ./dolphinscheduler-dist/target/apache-dolphinscheduler-*-SNAPSHOT-bin.tar.gz
        retention-days: 1
    strategy:
      matrix:
        java:
        - '8'
        - '11'
    timeout-minutes: 30
  cluster-test:
    name: ${{ matrix.case.name }}
    needs: build
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v2
      with:
        submodules: true
    - continue-on-error: true
      name: Download Binary Package
      uses: actions/download-artifact@v2
      with:
        name: binary-package-8
        path: ./
    - continue-on-error: true
      name: Running cluster test
      run: '/bin/bash ${{ matrix.case.script }}

        '
    strategy:
      matrix:
        case:
        - name: cluster-test-mysql-with-zookeeper-registry
          script: .github/workflows/cluster-test/mysql_with_zookeeper_registry/start-job.sh
        - name: cluster-test-mysql-with-mysql-registry
          script: .github/workflows/cluster-test/mysql_with_mysql_registry/start-job.sh
        - name: cluster-test-postgresql-zookeeper-registry
          script: .github/workflows/cluster-test/postgresql_with_zookeeper_registry/start-job.sh
        - name: cluster-test-postgresql-with-postgresql-registry
          script: .github/workflows/cluster-test/postgresql_with_postgresql_registry/start-job.sh
    timeout-minutes: 20
  paths-filter:
    name: Backend-Path-Filter
    outputs:
      db-schema: ${{ steps.filter.outputs.db-schema }}
      not-ignore: ${{ steps.filter.outputs.not-ignore }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      uses: actions/checkout@v2
    - continue-on-error: true
      id: filter
      uses: dorny/paths-filter@b2feaf19c27470162a626bd6fa8438ae5b263721
      with:
        filters: "not-ignore:\n  - '!(docs/**)'\ndb-schema:\n  - 'dolphinscheduler-dao/src/main/resources/sql/**'\n"
  result:
    if: always()
    name: Build
    needs:
    - build
    - paths-filter
    - cluster-test
    - schema-check
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Status
      run: "if [[ ${{ needs.paths-filter.outputs.not-ignore }} == 'false' && ${{ needs.paths-filter.outputs.db-schema\
        \ }} == 'false' && ${{ github.event_name }} == 'pull_request' ]]; then\n \
        \ echo \"Skip Build!\"\n  exit 0\nfi\nif [[ ${{ needs.build.result }} != 'success'\
        \ || ${{ needs.cluster-test.result }} != 'success' ]]; then\n  echo \"Build\
        \ Failed!\"\n  exit -1\nfi\n"
    timeout-minutes: 30
  schema-check:
    if: ${{ (needs.paths-filter.outputs.db-schema == 'true') || (github.event_name
      == 'push') }}
    needs: build
    runs-on: self-hosted
    services:
      mysql:
        env:
          MYSQL_DATABASE: dolphinscheduler_dev
          MYSQL_ROOT_PASSWORD: mysql
        image: mysql:5.7
        options: --name=mysql --health-cmd="mysqladmin ping" --health-interval=10s
          --health-timeout=5s --health-retries=3
        ports:
        - 3306:3306
      postgres:
        env:
          POSTGRES_DB: dolphinscheduler_dev
          POSTGRES_PASSWORD: postgres
        image: postgres:15
        options: --name=postgres --health-cmd=pg_isready --health-interval=10s --health-timeout=5s
          --health-retries=5
        ports:
        - 5432:5432
    steps:
    - continue-on-error: true
      name: Set up JDK 8
      uses: actions/setup-java@v2
      with:
        distribution: adopt
        java-version: 8
    - continue-on-error: true
      name: Install Atlas and Create Dir
      run: 'mkdir -p dolphinscheduler/dev dolphinscheduler/${{ matrix.version }}

        curl -sSf https://atlasgo.sh | sh

        '
    - continue-on-error: true
      name: Download Tarball
      uses: actions/download-artifact@v2
      with:
        name: binary-package-8
        path: dolphinscheduler/dev
    - continue-on-error: true
      name: Set Env
      run: 'VERSION=${{ matrix.version }}

        echo "DATABASE_VERSION=${VERSION//\./}" >> $GITHUB_ENV

        '
    - continue-on-error: true
      name: Prepare
      run: "wget https://archive.apache.org/dist/dolphinscheduler/${{ matrix.version\
        \ }}/apache-dolphinscheduler-${{ matrix.version }}-bin.tar.gz -P dolphinscheduler/${{\
        \ matrix.version }}\ntar -xzf dolphinscheduler/${{ matrix.version }}/apache-dolphinscheduler-${{\
        \ matrix.version }}-bin.tar.gz -C dolphinscheduler/${{ matrix.version }} --strip-components\
        \ 1\ntar -xzf dolphinscheduler/dev/apache-dolphinscheduler-*-bin.tar.gz -C\
        \ dolphinscheduler/dev --strip-components 1\n\nif [[ ${{ matrix.db }} == \"\
        mysql\" ]]; then\n  MYSQL_JDBC_URL=\"https://repo.maven.apache.org/maven2/mysql/mysql-connector-java/8.0.16/mysql-connector-java-8.0.16.jar\"\
        \n  MYSQL_JDBC_JAR=\"mysql-connector-java-8.0.16.jar\"\n  wget ${MYSQL_JDBC_URL}\
        \ -O /tmp/${MYSQL_JDBC_JAR}\n  for base_dir in dolphinscheduler/dev dolphinscheduler/${{\
        \ matrix.version }}; do\n    if [[ $base_dir == *\"dolphinscheduler/2\"* ]];\
        \ then\n      cp /tmp/${MYSQL_JDBC_JAR} ${base_dir}/lib\n    else\n      for\
        \ d in alert-server api-server master-server worker-server tools; do\n   \
        \     cp /tmp/${MYSQL_JDBC_JAR} ${base_dir}/${d}/libs\n      done\n    fi\n\
        \  done\n  docker exec -i mysql mysql -uroot -pmysql -e \"create database\
        \ dolphinscheduler_${{ env.DATABASE_VERSION }}\"; \nelse\n  docker exec -i\
        \ postgres psql -U postgres -c \"create database dolphinscheduler_${{ env.DATABASE_VERSION\
        \ }};\"\nfi\n"
    - continue-on-error: true
      name: Check
      run: "if [[ $DATABASE_VERSION -lt 300 ]]; then\n  chmod +x dolphinscheduler/dev/tools/bin/upgrade-schema.sh\
        \ dolphinscheduler/${{ matrix.version }}/script/create-dolphinscheduler.sh\n\
        else\n  chmod +x dolphinscheduler/dev/tools/bin/upgrade-schema.sh dolphinscheduler/${{\
        \ matrix.version }}/tools/bin/upgrade-schema.sh\nfi\nif [[ ${{ matrix.db }}\
        \ == \"mysql\" ]]; then\n  export DATABASE=\"mysql\"\n  export SPRING_DATASOURCE_DRIVER_CLASS_NAME=\"\
        com.mysql.cj.jdbc.Driver\"\n  export SPRING_DATASOURCE_URL=\"jdbc:mysql://127.0.0.1:3306/dolphinscheduler_dev?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false\"\
        \n  export SPRING_DATASOURCE_USERNAME=\"root\"\n  export SPRING_DATASOURCE_PASSWORD=\"\
        mysql\"\n  bash dolphinscheduler/dev/tools/bin/upgrade-schema.sh\n\n  export\
        \ SPRING_DATASOURCE_URL=\"jdbc:mysql://127.0.0.1:3306/dolphinscheduler_${{\
        \ env.DATABASE_VERSION }}?useUnicode=true&characterEncoding=UTF-8&allowMultiQueries=true&useSSL=false\"\
        \n  if [[ $DATABASE_VERSION -lt 300 ]]; then\n    bash dolphinscheduler/${{\
        \ matrix.version }}/script/create-dolphinscheduler.sh\n  else\n    bash dolphinscheduler/${{\
        \ matrix.version }}/tools/bin/upgrade-schema.sh\n  fi\n  bash dolphinscheduler/dev/tools/bin/upgrade-schema.sh\n\
        \n  atlas_result=$(atlas schema diff \\\n    --from \"mysql://root:mysql@127.0.0.1:3306/dolphinscheduler_${{\
        \ env.DATABASE_VERSION }}\" \\\n    --to \"mysql://root:mysql@127.0.0.1:3306/dolphinscheduler_dev\"\
        )\n  if [[ ${atlas_result} != *\"Schemas are synced\"* ]]; then\n    echo\
        \ \"================================================================================================\"\
        \n    echo \"                                !!!!! For Contributors !!!!!\"\
        \n    echo \"================================================================================================\"\
        \n    echo \"Database schema not sync, please add below change in the latest\
        \ version of dolphinscheduler-dao/src/main/resources/sql/upgrade directory\"\
        \n    echo \"${atlas_result}\"\n    exit 1\n  fi\nelse\n  export DATABASE=\"\
        postgresql\"\n  export SPRING_DATASOURCE_DRIVER_CLASS_NAME=\"org.postgresql.Driver\"\
        \n  export SPRING_DATASOURCE_URL=\"jdbc:postgresql://127.0.0.1:5432/dolphinscheduler_dev\"\
        \n  export SPRING_DATASOURCE_USERNAME=\"postgres\"\n  export SPRING_DATASOURCE_PASSWORD=\"\
        postgres\"\n  bash dolphinscheduler/dev/tools/bin/upgrade-schema.sh\n\n  export\
        \ SPRING_DATASOURCE_URL=\"jdbc:postgresql://127.0.0.1:5432/dolphinscheduler_${{\
        \ env.DATABASE_VERSION }}\"\n  if [[ $DATABASE_VERSION -lt 300 ]]; then\n\
        \    bash dolphinscheduler/${{ matrix.version }}/script/create-dolphinscheduler.sh\n\
        \  else\n    bash dolphinscheduler/${{ matrix.version }}/tools/bin/upgrade-schema.sh\n\
        \  fi\n  bash dolphinscheduler/dev/tools/bin/upgrade-schema.sh\n\n  atlas_result=$(atlas\
        \ schema diff \\\n    --from \"postgres://postgres:postgres@127.0.0.1:5432/dolphinscheduler_${{\
        \ env.DATABASE_VERSION }}?search_path=public&sslmode=disable\" \\\n    --to\
        \ \"postgres://postgres:postgres@127.0.0.1:5432/dolphinscheduler_dev?search_path=public&sslmode=disable\"\
        )\n  if [[ ${atlas_result} != *\"Schemas are synced\"* ]]; then\n    echo\
        \ \"================================================================================================\"\
        \n    echo \"                                !!!!! For Contributors !!!!!\"\
        \n    echo \"================================================================================================\"\
        \n    echo \"Database schema not sync, please add below change in the latest\
        \ version in dolphinscheduler-dao/src/main/resources/sql/upgrade directory\"\
        \n    echo \"${atlas_result}\"\n    exit 1\n  fi\nfi\n"
    strategy:
      fail-fast: false
      matrix:
        db:
        - mysql
        - postgresql
        version:
        - 3.1.9
        - 3.2.0
    timeout-minutes: 20
name: Backend
on:
  repository_dispatch:
    types: trigger-ga___backend.yml
